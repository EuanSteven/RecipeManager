<?php
// Enable error reporting
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Database connection details
$servername = "localhost";
$username = "root";
$password = "password1";
$dbname = "prod";
$port = 3306;

$conn = new mysqli($servername, $username, $password, $dbname, $port);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Function to sanitize input
function sanitize_input($data) {
    return htmlspecialchars(stripslashes(trim($data)));
}

$error = '';
$success = '';

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Collect and sanitize form data
    $recipe_name = sanitize_input($_POST["recipe_name"]);
    $serving_size = sanitize_input($_POST["serving_size"]);
    $cooking_time = intval($_POST["cooking_time"]);
    $directions = sanitize_input($_POST["directions"]);
    $vegan = isset($_POST["vegan"]) ? 1 : 0;
    $vegetarian = isset($_POST["vegetarian"]) ? 1 : 0;
    $gluten_free = isset($_POST["gluten_free"]) ? 1 : 0;

    // Start transaction
    $conn->begin_transaction();

    try {
        // Insert into recipes table
        $sql_recipe = "INSERT INTO recipes (recipe_name, serving_size, cooking_time, directions) 
                       VALUES (?, ?, ?, ?)";
        $stmt_recipe = $conn->prepare($sql_recipe);
        if (!$stmt_recipe) {
            throw new Exception("Prepare failed for recipes: " . $conn->error);
        }
        $stmt_recipe->bind_param("ssis", $recipe_name, $serving_size, $cooking_time, $directions);
        if (!$stmt_recipe->execute()) {
            throw new Exception("Execute failed for recipes: " . $stmt_recipe->error);
        }
        $recipe_id = $stmt_recipe->insert_id;
        $stmt_recipe->close();

        // Insert ingredients and measurements
        if (isset($_POST["ingredient_name"]) && is_array($_POST["ingredient_name"])) {
            $sql_ingredient = "INSERT INTO ingredients (ingredient_name) VALUES (?)";
            $sql_measurement = "INSERT INTO measurements (recipe_id, ingredient_id, quantity, unit) VALUES (?, ?, ?, ?)";
            
            $stmt_ingredient = $conn->prepare($sql_ingredient);
            $stmt_measurement = $conn->prepare($sql_measurement);

            if (!$stmt_ingredient || !$stmt_measurement) {
                throw new Exception("Prepare failed for ingredients/measurements: " . $conn->error);
            }

            foreach ($_POST["ingredient_name"] as $key => $ingredient_name) {
                $ingredient_name = sanitize_input($ingredient_name);
                $quantity = floatval($_POST["quantity"][$key]);
                $unit = sanitize_input($_POST["unit"][$key]);

                $stmt_ingredient->bind_param("s", $ingredient_name);
                if (!$stmt_ingredient->execute()) {
                    throw new Exception("Execute failed for ingredient: " . $stmt_ingredient->error);
                }
                $ingredient_id = $stmt_ingredient->insert_id;

                $stmt_measurement->bind_param("iids", $recipe_id, $ingredient_id, $quantity, $unit);
                if (!$stmt_measurement->execute()) {
                    throw new Exception("Execute failed for measurement: " . $stmt_measurement->error);
                }
            }

            $stmt_ingredient->close();
            $stmt_measurement->close();
        }

        // Insert media links
        if (isset($_POST["media_link"]) && is_array($_POST["media_link"])) {
            $sql_media = "INSERT INTO media (recipe_id, media_link) VALUES (?, ?)";
            $stmt_media = $conn->prepare($sql_media);
            if (!$stmt_media) {
                throw new Exception("Prepare failed for media: " . $conn->error);
            }

            foreach ($_POST["media_link"] as $media_link) {
                $media_link = sanitize_input($media_link);
                $stmt_media->bind_param("is", $recipe_id, $media_link);
                if (!$stmt_media->execute()) {
                    throw new Exception("Execute failed for media: " . $stmt_media->error);
                }
            }

            $stmt_media->close();
        }

        // Insert nutrition information
        $sql_nutrition = "INSERT INTO nutrition (recipe_id, kcal, protein, carbs, fat, sugar) 
                          VALUES (?, ?, ?, ?, ?, ?)";
        $stmt_nutrition = $conn->prepare($sql_nutrition);
        if (!$stmt_nutrition) {
            throw new Exception("Prepare failed for nutrition: " . $conn->error);
        }
        $kcal = intval($_POST["kcal"]);
        $protein = intval($_POST["protein"]);
        $carbs = intval($_POST["carbs"]);
        $fat = intval($_POST["fat"]);
        $sugar = intval($_POST["sugar"]);
        $stmt_nutrition->bind_param("iiiiii", $recipe_id, $kcal, $protein, $carbs, $fat, $sugar);
        if (!$stmt_nutrition->execute()) {
            throw new Exception("Execute failed for nutrition: " . $stmt_nutrition->error);
        }
        $stmt_nutrition->close();

        // Insert categories and tags
        $sql_recipe_tag = "INSERT INTO recipe_tag (recipe_id, category_id, tag_id, vegan, vegetarian, gluten_free) 
                           VALUES (?, ?, ?, ?, ?, ?)";
        $stmt_recipe_tag = $conn->prepare($sql_recipe_tag);
        if (!$stmt_recipe_tag) {
            throw new Exception("Prepare failed for recipe_tag: " . $conn->error);
        }

        if (isset($_POST["categories"]) && is_array($_POST["categories"])) {
            foreach ($_POST["categories"] as $category_id) {
                $category_id = sanitize_input($category_id);
                $dummy_tag = null;
                $stmt_recipe_tag->bind_param("iiiii", $recipe_id, $category_id, $vegan, $vegetarian, $gluten_free);
                if (!$stmt_recipe_tag->execute()) {
                    throw new Exception("Execute failed for category: " . $stmt_recipe_tag->error);
                }
            }
        }

        if (isset($_POST["tags"]) && is_array($_POST["tags"])) {
            foreach ($_POST["tags"] as $tag_id) {
                $tag_id = sanitize_input($tag_id);
                $dummy_category = null;
                $stmt_recipe_tag->bind_param("iiiii", $recipe_id, $tag_id, $vegan, $vegetarian, $gluten_free);
                if (!$stmt_recipe_tag->execute()) {
                    throw new Exception("Execute failed for tag: " . $stmt_recipe_tag->error);
                }
            }
        }

        $stmt_recipe_tag->close();

            // Commit transaction
            $conn->commit();
        } catch (Exception $e) {
            // Rollback transaction on error
            $conn->rollback();
            }
}

// Close connection
$conn->close();
?>